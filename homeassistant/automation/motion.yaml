- alias: Bedroom Motion
  id: bedroom_motion
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: binary_sensor.bedroom_motion
      to: 'on'
    - platform: state
      entity_id: binary_sensor.bedroom_motion
      to: 'off'
      for:
        minutes: 3
    - platform: state
      entity_id: light.bedroom_lights
      to: 'on'
      for:
        minutes: 5
  condition:
    - condition: state
      entity_id: input_boolean.motion
      state: 'on'
  action:
    - choose:
        # Turn on if motion, home, lights off, not sleeping, and not waking up
        - conditions:
            - condition: state
              entity_id: binary_sensor.bedroom_motion
              state: 'on'
            - condition: state
              entity_id: input_boolean.presence
              state: 'on'
            - condition: state
              entity_id: binary_sensor.apartment_occupied
              state: 'on'
            - condition: state
              entity_id: light.bedroom_lights
              state: 'off'
            - condition: state
              entity_id: binary_sensor.jeff_sleeping_at_home
              state: 'off'
            - condition: state
              entity_id: script.bedroom_wake_up
              state: 'off'
            - condition: numeric_state
              entity_id: sensor.bedroom_luminance
              below: '60'
          sequence:
            - service: light.turn_on
              entity_id: light.bedroom_lights
              data:
                kelvin: "{{ state_attr('switch.circadian_lighting_bedroom', 'colortemp')|int }}"
                brightness_pct: "{{ state_attr('switch.circadian_lighting_bedroom', 'brightness')|float }}"
        # Turn off if no motion for 3 minutes, lights on, not sleeping or doing something special
        - conditions:
            - condition: state
              entity_id: binary_sensor.bedroom_motion
              state: 'off'
              for:
                minutes: 3
            - condition: state
              entity_id: light.bedroom_lights
              state: 'on'
            - condition: or
              conditions:
                # If fluxer is off, we're probably doing something specific
                # There may be a better way to handle this
                - condition: state
                  entity_id: switch.circadian_lighting_bedroom
                  state: 'on'
                # If we're sleeping, fluxer will still be off, but we definitely want to turn off
                - condition: state
                  entity_id: binary_sensor.jeff_sleeping_at_home
                  state: 'on'
          sequence:
            - service: light.turn_off
              entity_id: light.bedroom_lights
            - alias: "Wait until lights turn off"
              wait_template: "{{ is_state('light.bedroom_lights', 'off') }}"
            - service: switch.turn_on
              entity_id: switch.circadian_lighting_bedroom


- alias: Bathroom Motion
  id: bathroom_motion
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: binary_sensor.bathroom_motion
      to: 'on'
    - platform: state
      entity_id: binary_sensor.bathroom_motion
      to: 'off'
      for:
        minutes: 5
    - platform: state
      entity_id: light.bathroom_lights
      to: 'on'
      for:
        minutes: 10
  condition:
    - condition: state
      entity_id: input_boolean.motion
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.bathroom_motion
              state: 'on'
            - condition: state
              entity_id: input_boolean.presence
              state: 'on'
            - condition: state
              entity_id: binary_sensor.apartment_occupied
              state: 'on'
            - condition: state
              entity_id: light.bathroom_lights
              state: 'off'
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.jeff_sleeping_at_home
                      state: 'off'
                    - condition: state
                      entity_id: group.all_lights
                      state: 'on'
                  sequence:
                    - service: light.turn_on
                      entity_id: light.bathroom_lights
                      data:
                        kelvin: "{{ state_attr('switch.circadian_lighting_bathroom', 'colortemp')|int }}"
                        brightness_pct: "{{ state_attr('switch.circadian_lighting_bathroom', 'brightness')|float }}"
              default:
                - service: switch.turn_off
                  entity_id: switch.circadian_lighting_bathroom
                - service: light.turn_on
                  entity_id: light.bathroom_mirror_2
                  data:
                    brightness: 4
                    color_temp: 454
                    transition: 10
        - conditions:
            - condition: state
              entity_id: binary_sensor.bathroom_motion
              state: 'off'
              for:
                minutes: 5
            - condition: state
              entity_id: light.bathroom_lights
              state: 'on'
            # Don't turn off if we're showering
            - condition: state
              entity_id: binary_sensor.showering
              state:
                - 'off'
                - 'unknown'
            - condition: or
              conditions:
                # If fluxer is off, we're probably doing something specific
                # There may be a better way to handle this
                - condition: state
                  entity_id: switch.circadian_lighting_bathroom
                  state: 'on'
                # If we're sleeping, fluxer will still be off, but we definitely want to turn off
                - condition: state
                  entity_id: binary_sensor.jeff_sleeping_at_home
                  state: 'on'
          sequence:
            - service: light.turn_off
              entity_id: light.bathroom_lights
            - alias: "Wait until lights turn off"
              wait_template: "{{ is_state('light.bathroom_lights', 'off') }}"
            - service: switch.turn_on
              entity_id: switch.circadian_lighting_bathroom


- alias: Closet Motion
  id: closet_motion
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: binary_sensor.closet_motion
      to: 'on'
    - platform: state
      entity_id: binary_sensor.closet_motion
      to: 'off'
      for:
        minutes: 3
    - platform: state
      entity_id: light.closet_lights
      to: 'on'
      for:
        minutes: 5
  condition:
    - condition: state
      entity_id: input_boolean.motion
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.closet_motion
              state: 'on'
            - condition: state
              entity_id: input_boolean.presence
              state: 'on'
            - condition: state
              entity_id: binary_sensor.apartment_occupied
              state: 'on'
            - condition: state
              entity_id: light.closet_lights
              state: 'off'
            - condition: state
              entity_id: binary_sensor.jeff_sleeping_at_home
              state: 'off'
              for:
                minutes: 30
          sequence:
            - service: light.turn_on
              entity_id: light.closet_lights
              data:
                kelvin: "{{ state_attr('switch.circadian_lighting_closet', 'colortemp')|int }}"
                brightness_pct: "{{ state_attr('switch.circadian_lighting_closet', 'brightness')|float }}"
        - conditions:
            - condition: state
              entity_id: binary_sensor.closet_motion
              state: 'off'
              for:
                minutes: 3
            - condition: state
              entity_id: light.closet_lights
              state: 'on'
            - condition: or
              conditions:
                # If fluxer is off, we're probably doing something specific
                # There may be a better way to handle this
                - condition: state
                  entity_id: switch.circadian_lighting_bathroom
                  state: 'on'
                # If we're sleeping, fluxer will still be off, but we definitely want to turn off
                - condition: state
                  entity_id: binary_sensor.jeff_sleeping_at_home
                  state: 'on'
          sequence:
            - service: light.turn_off
              entity_id: light.closet_lights
            - alias: "Wait until lights turn off"
              wait_template: "{{ is_state('light.closet_lights', 'off') }}"
            - service: switch.turn_on
              entity_id: switch.circadian_lighting_closet
