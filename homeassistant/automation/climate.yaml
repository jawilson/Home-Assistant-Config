- alias: Nest home
  id: nest_home
  trigger:
    - platform: template
      value_template: "{{ states('proximity.home')|int(1000) < 1000 }}"
    - platform: state
      entity_id: binary_sensor.presume_home
      to: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.presence
      state: 'on'
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ trigger.platform == 'state' }}"
        - condition: or
          conditions:
            - condition: template
              value_template: "{{ is_state_attr('proximity.home', 'dir_of_travel', 'arrived') }}"
            - condition: template
              value_template: "{{ is_state_attr('proximity.home', 'dir_of_travel', 'towards') }}"
    - condition: state
      entity_id: binary_sensor.jeff_sleeping_at_home
      state: 'off'
  action:
    service: script.turn_on
    entity_id: script.nest_home


- alias: Nest while home
  id: nest_while_home
  trigger:
    platform: state
    entity_id: switch.apartment_home
    to: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.presence
      state: 'on'
    - condition: state
      entity_id: binary_sensor.presume_home
      state: 'on'
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
  action:
    service: switch.turn_on
    entity_id: switch.apartment_home


- alias: Nest away
  id: nest_away
  trigger:
    - platform: template
      value_template: "{{ states('proximity.home')|int(0) > 500 }}"
    - platform: state
      entity_id: binary_sensor.presume_home
      to: 'off'
      for:
        minutes: 5
    - platform: state
      entity_id: switch.apartment_home
      to: 'on'
      for:
        minutes: 30
  condition:
    - condition: state
      entity_id: input_boolean.presence
      state: 'on'
    - condition: state
      entity_id: binary_sensor.presume_home
      state: 'off'
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ trigger.platform == 'state' }}"
        - condition: or
          conditions:
            - condition: template
              value_template: "{{ is_state_attr('proximity.home', 'dir_of_travel', 'away_from') }}"
            - condition: template
              value_template: "{{ is_state_attr('proximity.home', 'dir_of_travel', 'stationary') }}"
  action:
    service: homeassistant.turn_off
    entity_id:
      - script.nest_home
      - switch.apartment_home


- alias: Circulate air
  id: circulate_air
  max_exceeded: silent
  trigger:
    - platform: numeric_state
      entity_id: sensor.hvac_fan_runtime
      below: 0.15
    - platform: template
      value_template: "{{ states('sensor.max_apartment_temperature')|float(0) - states('sensor.min_apartment_temperature')|float(0) > 2.0 }}"
    - platform: state
      entity_id: binary_sensor.apartment_thermostat_fan
      to: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
    - condition: or
      conditions:
        - condition: numeric_state
          entity_id: sensor.hvac_fan_runtime
          below: 0.25
        - "{{ states('sensor.max_apartment_temperature')|float(0) - states('sensor.min_apartment_temperature')|float(0) > 2.0 }}"
    - condition: numeric_state
      entity_id: sensor.hvac_fan_runtime
      below: 1
  action:
    service: climate.set_fan_mode
    entity_id: climate.apartment
    data:
      fan_mode: 'on'


- alias: End circulate air
  id: end_circulate_air
  trigger:
    - platform: numeric_state
      entity_id: sensor.hvac_fan_runtime
      above: 0.35
    - platform: template
      value_template: "{{ states('sensor.max_apartment_temperature')|float(0) - states('sensor.min_apartment_temperature')|float(0) < 1.5 }}"
  condition:
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
    - condition: numeric_state
      entity_id: sensor.hvac_fan_runtime
      above: 0.35
    - "{{ states('sensor.max_apartment_temperature')|float(0) - states('sensor.min_apartment_temperature')|float(0) < 1.5 }}"
  action:
    service: climate.set_fan_mode
    entity_id: climate.apartment
    data:
      fan_mode: 'off'


- alias: Humidity too low
  id: humidity_too_low
  trigger:
    platform: numeric_state
    entity_id: sensor.apartment_humidities
    below: 45
  condition:
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
  action:
    service: switch.turn_on
    entity_id: switch.humidifier


- alias: Humidity too high
  id: humidity_too_high
  trigger:
    platform: numeric_state
    entity_id: sensor.apartment_humidities
    above: 50
  condition:
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.humidifier


- alias: Invalid default high
  id: invalid_default_high
  trigger:
    platform: state
    entity_id: input_number.default_high_temp
  condition:
    condition: template
    value_template: >
      "{{ states('input_number.default_high_temp')|int - states('input_number.default_low_temp')|int < 2 }}"
  action:
    service: input_number.set_value
    entity_id: input_number.default_high_temp
    data_template:
      value: "{{ states('input_number.default_low_temp')|int + 2 }}"


- alias: Invalid default low
  id: invalid_default_low
  trigger:
    platform: state
    entity_id: input_number.default_low_temp
  condition:
    condition: template
    value_template: >
      "{{ states('input_number.default_high_temp')|int - states('input_number.default_low_temp')|int < 2 }}"
  action:
    service: input_number.set_value
    entity_id: input_number.default_low_temp
    data_template:
      value: "{{ states('input_number.default_high_temp')|int - 2 }}"


- alias: Auto Sunroom Fan
  id: sunroom_fan
  trigger:
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: climate.sunroom
    - platform: state
      entity_id: sensor.sunroom_temperature
    - platform: state
      entity_id: input_boolean.climate_auto
      to: 'on'
    - platform: state
      entity_id: input_boolean.guests
      to: 'off'
  mode: restart
  condition:
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
    - condition: state
      entity_id: input_boolean.guests
      state: 'off'
    - "{{ not is_state('sensor.sunroom_temperature', 'unavailable') }}"
    - "{{ not is_state('sensor.non_sunroom_temperatures', 'unavailable') }}"
  action:
    - variables:
        percentage: >
          {{ [[(states('sensor.sunroom_temperature')|float - states('sensor.non_sunroom_temperatures')|float)|round(0, "floor")*33, 0]|max, 100]|min }}
    - variables:
        percentage: >
          {{ percentage if is_state('automation.sunroom_auto_temp', 'on') else 0 }}
    - variables:
        percentage: >
          {{ [percentage, (33 if is_state_attr('climate.sunroom', 'hvac_action', 'heating') else 0)]|max }}
    - condition: template
      value_template: "{{ state_attr('fan.sunroom', 'percentage') != percentage }}"
    - service: fan.set_percentage
      target:
        entity_id: fan.sunroom
      data:
        percentage: "{{ percentage }}"

- alias: Sunroom Auto-Temp
  id: sunroom_auto_temp
  mode: restart
  trigger:
    - platform: state
      entity_id: climate.apartment
      to:
    - platform: state
      entity_id: climate.apartment
      attribute: temperature
      id: temperature
    - platform: state
      entity_id: climate.apartment
      attribute: target_temp_low
    - platform: state
      entity_id: binary_sensor.apartment_occupied
      id: presence
  condition:
    - condition: state
      entity_id: input_boolean.climate_auto
      state: 'on'
    - "{{ trigger.id != 'presence' or is_state('input_boolean.presence', 'on') }}"
    - "{{ trigger.id != 'temperature' or not is_state('climate.apartment', 'cool') }}"
  action:
    - choose:
      - conditions: "{{ trigger.id == 'presence' }}"
        sequence:
          - service: climate.set_preset_mode
            target:
              entity_id: climate.sunroom
            data:
              preset_mode: "{{ 'none' if is_state('binary_sensor.apartment_occupied', 'on') else 'away' }}"
    - choose:
        - conditions: "{{ is_state('binary_sensor.apartment_occupied', 'off') }}"
          sequence:
            service: climate.set_hvac_mode
            target:
              entity_id: climate.sunroom
            data:
              hvac_mode: "{{ 'off' if states('climate.apartment') in ('off', 'cool') else 'heat' }}"
        - conditions: >
            {{ is_state('climate.apartment', 'off') or is_state('climate.apartment', 'cool') }}
          sequence:
            service: climate.set_hvac_mode
            target:
              entity_id: climate.sunroom
            data:
              hvac_mode: 'off'
      default:
        service: climate.set_temperature
        target:
          entity_id: climate.sunroom
        data:
          hvac_mode: heat
          temperature: >
            {{ state_attr('climate.apartment', 'target_temp_low')|float if is_state('climate.apartment', 'heat_cool') else state_attr('climate.apartment', 'temperature')|float }}
